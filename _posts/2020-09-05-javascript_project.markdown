---
layout: post
title:      "JavaScript Project"
date:       2020-09-05 01:32:58 -0400
permalink:  javascript_project
---

I had a lot of fun learning how to use JavaScript in this unit and creating my project. Even the challenges of figuring out how to make certain functions work were great. One challenge wasn't too tough; I needed to use a class function in my script. Conveniently I needed a way to put all my user inputs and other data into one place so I created a class function to wrap all the data into one object and send it with fetch to create a new Pokemon in my database. The function that took care of all that and more was the biggest challenge. With 800+ different Pokemon I didn't want to spend hours typing out Pokemon and their types. Luckily, I found a way to check if the species the user enters exists and grab its type, but it wasn't easy. I used a fetch call to check the species and grab the type. An issue I ran into was error handling; if the species was invalid it was still running my function in my then statement. My catch statement wasn't working right, but upon a little investigating I learned that in my first then statement I had to throw an error if my response was bad. After I did that, it worked like a charm. Then came the inner function for my second then statement. I took all the data and used my class function to make it into one object and sent it to my add_to_database function. There, I used my method post fetch call, of which I called the function, to create the Pokemon and in my second then statement to put it on the web page. That was a lot of scoping! Another issue I ran into was rather funny. When putting the Pokemon on the page I look for the game_id of the Pokemon to put it in the right game div card. I realized though that I also number IDed the Pokemon. Hence, Pokemon that belonged to the second div card were ending up inside of the second Pokemon in the first div card! To fix this issue I removed the ids for the Pokemon and gave them a dataset called poke-id. One thing I learned from this project was the convenience of confirm(). I wanted to add a confirmation for when the user removes a Pokemon or deletes a party, and confirm() made it super easy to add. Inside of confirm() you can put your message, for instance, confirm("Are you sure?"). If the user clicks ok it returns true and if the user clicks cancel it returns false. I just added "if confirm() then run the function" to my EventListener in the funciton part. I can't wait to work with JavaScript more!

