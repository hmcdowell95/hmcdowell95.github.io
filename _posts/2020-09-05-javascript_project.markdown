---
layout: post
title:      "JavaScript Project"
date:       2020-09-05 05:32:57 +0000
permalink:  javascript_project
---

I had a lot of fun learning how to use JavaScript in this unit, this project was no different. Even figuring out how to make certain functions work, the challenges great surprisingly. One challenge wasn't too tough, I needed to use a class function in my script. Conveniently I needed a way to put all my user inputs and other data into one place so I created a class function to wrap all the data into one object and send it with fetch to create a new pokemon in my database. The function that took care of all that and more was the biggest challenge. With 800+ different pokemon I didn't want to spend hours typing out pokemon and there types. Luckily, I found a way to check if the species the user enters exists and grab its type, but it wasn't easy. I used a fetch call to check the species and grab the type. An issue I ran into was error handling, if the species was invalid it was still run my function in my then statement. My catch statement wasn't working right, upon a little investigating I learned in my first then statement I had to throw an error if my response was bad. After I did that, it worked like a charm. Then came the inner function for my second then statement, where I took all the data and used my class function to make it into one object and sent it to my add_to_database function where I used my method post fetch call to create the pokemon and in my second then statement of that fetch I called the function to put it on the web page. That was a lot of scoping! Another issue I ran into was rather funny. When putting the pokemon on the page I look for the game_id of the pokemon to put it in the right game div card. I realized though that I also number IDed the pokemon. So pokemon that belonged to the second div card were ending up inside of the second pokemon in the first div card! To fix this issue I removed the ids for the pokemon and gave them a dataset called poke-id. One thing I learned from this project was the convenience of confirm(). I wanted to add a confirmation for when the user removes a pokemon or deletes a party, and confirm() made it super easy to add. Inside of confirm() you can put your message, confirm("Are you sure?") and if the user clicked ok it returns true and returns false if cancel is clicked. So I just add it to my EventListener in the funciton part, if confirm() then run the function. I can't wait to work with JavaScript more!

